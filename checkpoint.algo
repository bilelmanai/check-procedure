PROCEDURE dot_porduct(v1,v2:ARRAY_OF INTEGER[100][100];)
VAR
    j,i:INTEGER;
    ps:INTEGER:=0;
BEGIN
    FOR i FROM 0 TO 2n-1 STEP 2  DO
    FOR j FROM 0 TO 2   DO
        ps:= v1[i][j]* v2[i][j];
    END_FOR
    IF (ps=0)) THEN
            Write(v1[i],v2[i+1],"are orthogonal");
        END_IF
        ELSE 
        Write(v1[i],v2[i+1],"are not orthogonal");
    END_FOR

END
//-------------------------------------------------------------------------------


ALGORITHM orthogonal
VAR
    k,l:INTEGER;
    tab:ARRAY_OF INTEGER[100][100]
    
BEGIN
    read(n);
    FOR k FROM 0 TO  2n -1 step  DO
        FOR l FROM 0 TO 2   DO
            read(tab[k][l]);
        END_FOR
    END_FOR
    dot_porduct(tab[k][l],tab[k+1][l]);
    
END
//-----------------------------------------------------------------------------
FUNCTION func() : INTEGER;
VAR
    k,l:INTEGER;
    ps:INTEGER:=0;
BEGIN
    FOR l FROM 0 TO 2 DO
    ps:=ps+tab[k][l]* tab[k+1][l];
    END_FOR
    RETURN ps;
END


//-----------------------------------------------------------------------
ALGORITHM orthogonal
VAR
    k,l:INTEGER;
    tab:ARRAY_OF INTEGER[100][100]
    dot:INTEGER;
BEGIN
    read(n);
    FOR k FROM 0 TO  2n -1 step  DO
        FOR l FROM 0 TO 2   DO
            read(tab[k][l]);
        END_FOR
    END_FOR
    FOR k FROM 0 TO 2n-1 STEP 2  DO
        dot:=func()
        IF ((dot=0)) THEN
            Write(tab[k],tab[k+1],"are orthogonal");
        END_IF
        ELSE 
        Write(tab[k],tab[k+1],"are not orthogonal");
    END_FOR
END